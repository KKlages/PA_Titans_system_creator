# File: app.py
import streamlit as st
import json
import random
import io
import zipfile
from datetime import datetime
import math

st.set_page_config(
    page_title="PA Titans System Generator",
    page_icon="üåç",
    layout="wide"
)

def generate_system(
    num_additional_planets,
    starting_planet_radius,
    starting_planet_metal,
    additional_planet_radius,
    base_metal_value,
    system_name=None
):
    """
    Generate a PA Titans system with specified constraints.
    """
    
    if system_name is None:
        system_name = f"Random System {num_additional_planets}+2"
    
    system = {
        "name": system_name,
        "description": f"Procedural system with 2 starting planets and {num_additional_planets} additional",
        "version": "1.0",
        "planets": []
    }
    
    # Create 2 starting planets (symmetrically positioned on opposite sides)
    # They'll be on opposite sides of the orbit for stability
    orbital_radius = 25000
    orbital_velocity = 150  # Tangential velocity for circular orbit
    
    for i in range(2):
        # Position planets on opposite sides (180 degrees apart)
        angle = math.pi * i  # 0 for first planet, œÄ for second planet
        
        planet = {
            "name": f"Starting Planet {i+1}",
            "mass": 10000,
            "position_x": orbital_radius * math.cos(angle),
            "position_y": orbital_radius * math.sin(angle),
            # Velocity perpendicular to radius for circular orbit
            "velocity_x": -orbital_velocity * math.sin(angle),
            "velocity_y": orbital_velocity * math.cos(angle),
            "required_thrust_to_move": 0,
            "starting_planet": True,
            "respawn": False,
            "start_destroyed": False,
            "min_spawn_delay": 0,
            "max_spawn_delay": 0,
            "planet": {
                "seed": random.randint(0, 100000),
                "radius": starting_planet_radius,
                "heightRange": 50,
                "waterHeight": 0,
                "waterDepth": 0,
                "temperature": 50,
                "metalDensity": starting_planet_metal,  # Exact same value for both
                "metalClusters": 50,
                "biomeScale": 50,
                "biome": "earth"
            }
        }
        system["planets"].append(planet)
    
    # Create additional planets
    for i in range(num_additional_planets):
        # Metal deviation ¬±10%
        metal_deviation = random.uniform(-0.1, 0.1)
        metal_amount = base_metal_value * (1 + metal_deviation)
        
        # Position planets at varying distances and angles
        angle = random.uniform(0, 2 * math.pi)
        distance = random.randint(35000, 50000)
        
        # Calculate orbital velocity for the distance (simplified)
        orbital_vel = random.uniform(80, 120)
        
        planet = {
            "name": f"Resource Planet {i+1}",
            "mass": 5000,
            "position_x": distance * math.cos(angle),
            "position_y": distance * math.sin(angle),
            # Velocity perpendicular to radius for more stable orbits
            "velocity_x": -orbital_vel * math.sin(angle) + random.uniform(-20, 20),
            "velocity_y": orbital_vel * math.cos(angle) + random.uniform(-20, 20),
            "required_thrust_to_move": 0,
            "starting_planet": False,
            "respawn": False,
            "start_destroyed": False,
            "min_spawn_delay": 0,
            "max_spawn_delay": 0,
            "planet": {
                "seed": random.randint(0, 100000),
                "radius": additional_planet_radius,
                "heightRange": 50,
                "waterHeight": 0,
                "waterDepth": 0,
                "temperature": random.randint(0, 100),
                "metalDensity": int(metal_amount),
                "metalClusters": 40,
                "biomeScale": 50,
                "biome": random.choice(["earth", "desert", "lava", "moon", "tropical"])
            }
        }
        system["planets"].append(planet)
    
    return system

def create_zip_file(systems):
    """Create a zip file containing all generated systems."""
    zip_buffer = io.BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for i, system in enumerate(systems):
            filename = f"{system['name'].replace(' ', '_')}_{i+1}.pas"
            # WRAP THE SYSTEM IN AN ARRAY - THIS IS THE FIX!
            json_str = json.dumps([system], indent=2)  # Note the [system] instead of system
            zip_file.writestr(f"pa/maps/{filename}", json_str)  # Correct path
        
        # Add modinfo.json
        modinfo = {
            "context": "server",
            "identifier": "generated_maps",
            "display_name": "Generated Maps",
            "description": "Custom systems generated by Streamlit tool",
            "author": "PA Titans Community",
            "version": "1.0",
            "priority": 100
        }
        zip_file.writestr("modinfo.json", json.dumps(modinfo, indent=2))
        
        # Add README with correct installation path
        readme_content = """# PA Titans Generated Systems

## Installation Instructions

1. Extract this ZIP file
2. Copy the entire extracted folder to:
   - Windows: %LOCALAPPDATA%\\Uber Entertainment\\Planetary Annihilation\\server_mods\\
   - Linux: ~/.local/Uber Entertainment/Planetary Annihilation/server_mods/
   - Mac: ~/Library/Application Support/Uber Entertainment/Planetary Annihilation/server_mods/

3. Your final structure should be:
   server_mods/
     ‚îî‚îÄ‚îÄ generated_maps/
         ‚îú‚îÄ‚îÄ modinfo.json
         ‚îî‚îÄ‚îÄ pa/
             ‚îî‚îÄ‚îÄ maps/
                 ‚îú‚îÄ‚îÄ System1.pas
                 ‚îú‚îÄ‚îÄ System2.pas
                 ‚îî‚îÄ‚îÄ ...

4. Launch PA Titans
5. Go to Community Mods ‚Üí Enable "Generated Maps"
6. Start a Custom Game ‚Üí System Selection ‚Üí "My Systems"

Your generated systems should now appear!

Generated by: PA Titans System Generator
"""
        zip_file.writestr("README.txt", readme_content)
    
    zip_buffer.seek(0)
    return zip_buffer

# Main UI
st.title("üåç Planetary Annihilation: Titans System Generator")
st.markdown("Generate balanced star systems for PA Titans with customizable parameters")

# Sidebar for configuration
st.sidebar.header("System Configuration")

num_systems = st.sidebar.number_input(
    "Number of Systems to Generate",
    min_value=1,
    max_value=50,
    value=5,
    help="How many system variants to create"
)

st.sidebar.subheader("Planet Configuration")

num_additional = st.sidebar.selectbox(
    "Additional Planets",
    options=[1, 3, 5],
    index=1,
    help="Number of resource planets in addition to 2 starting planets"
)

st.sidebar.markdown("---")
st.sidebar.markdown("**Starting Planets**")

starting_radius = st.sidebar.slider(
    "Starting Planet Radius",
    min_value=200,
    max_value=800,
    value=400,
    step=50
)

starting_metal = st.sidebar.slider(
    "Starting Planet Metal Density",
    min_value=50,
    max_value=150,
    value=100,
    step=10
)

st.sidebar.markdown("---")
st.sidebar.markdown("**Additional Planets**")

additional_radius = st.sidebar.slider(
    "Additional Planet Radius",
    min_value=150,
    max_value=600,
    value=300,
    step=50
)

base_metal = st.sidebar.slider(
    "Base Metal Density (¬±10%)",
    min_value=20,
    max_value=100,
    value=50,
    step=5
)

# Custom naming
use_custom_name = st.sidebar.checkbox("Use Custom System Name")
custom_name_base = ""
if use_custom_name:
    custom_name_base = st.sidebar.text_input(
        "System Name Base",
        value="Custom System",
        help="Systems will be numbered: 'Custom System 1', 'Custom System 2', etc."
    )

# Main content area
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("System Preview")
    st.info(f"""
    **Configuration Summary:**
    - Starting Planets: 2 (Radius: {starting_radius}, Metal: {starting_metal})
    - Additional Planets: {num_additional} (Radius: {additional_radius}, Metal: {base_metal} ¬±10%)
    - Total Systems: {num_systems}
    - **Starting planets are positioned 180¬∞ apart for stable orbits**
    - **Both starting planets have identical metal density**
    """)

with col2:
    st.subheader("Actions")
    
    if st.button("üé≤ Generate Systems", type="primary", use_container_width=True):
        with st.spinner("Generating systems..."):
            systems = []
            
            for i in range(num_systems):
                system_name = None
                if use_custom_name and custom_name_base:
                    system_name = f"{custom_name_base} {i+1}"
                
                system = generate_system(
                    num_additional_planets=num_additional,
                    starting_planet_radius=starting_radius,
                    starting_planet_metal=starting_metal,
                    additional_planet_radius=additional_radius,
                    base_metal_value=base_metal,
                    system_name=system_name
                )
                systems.append(system)
            
            # Store in session state
            st.session_state.generated_systems = systems
            st.success(f"‚úÖ Generated {num_systems} systems successfully!")

# Display and download generated systems
if 'generated_systems' in st.session_state:
    st.markdown("---")
    st.subheader("Generated Systems")
    
    # Create tabs for preview and download
    tab1, tab2 = st.tabs(["üìã Preview", "‚¨áÔ∏è Download"])
    
    with tab1:
        selected_system = st.selectbox(
            "Select System to Preview",
            options=range(len(st.session_state.generated_systems)),
            format_func=lambda x: st.session_state.generated_systems[x]['name']
        )
        
        if selected_system is not None:
            system = st.session_state.generated_systems[selected_system]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**System Information**")
                st.json({
                    "name": system['name'],
                    "description": system['description'],
                    "total_planets": len(system['planets'])
                })
            
            with col2:
                st.markdown("**Planet Details**")
                for planet in system['planets']:
                    with st.expander(planet['name']):
                        st.write(f"Radius: {planet['planet']['radius']}")
                        st.write(f"Metal Density: {planet['planet']['metalDensity']}")
                        st.write(f"Biome: {planet['planet']['biome']}")
                        st.write(f"Starting Planet: {planet.get('starting_planet', False)}")
                        st.write(f"Position: ({planet['position_x']:.0f}, {planet['position_y']:.0f})")
                        st.write(f"Velocity: ({planet['velocity_x']:.0f}, {planet['velocity_y']:.0f})")
            
            # Show full JSON
            with st.expander("View Full JSON"):
                st.json(system)
    
    with tab2:
        st.markdown("### Download Options")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Download as ZIP
            zip_file = create_zip_file(st.session_state.generated_systems)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            st.download_button(
                label="üì¶ Download All Systems (ZIP)",
                data=zip_file,
                file_name=f"pa_titans_systems_{timestamp}.zip",
                mime="application/zip",
                use_container_width=True
            )
        
        with col2:
            # Download individual system
            selected_download = st.selectbox(
                "Download Individual System",
                options=range(len(st.session_state.generated_systems)),
                format_func=lambda x: st.session_state.generated_systems[x]['name'],
                key="download_select"
            )
            
            if selected_download is not None:
                system = st.session_state.generated_systems[selected_download]
                # WRAP IN ARRAY HERE TOO
                json_str = json.dumps([system], indent=2)  # Note the [system]
                filename = f"{system['name'].replace(' ', '_')}.pas"
                
                st.download_button(
                    label=f"‚¨áÔ∏è Download {system['name']}",
                    data=json_str,
                    file_name=filename,
                    mime="application/json",
                    use_container_width=True
                )

# Footer
st.markdown("---")
st.markdown("""
### üìñ Installation Instructions

1. Download the ZIP file containing your generated systems
2. Extract the .pas files
3. Copy them to your PA Titans directory:
   - **Windows**: `%LOCALAPPDATA%\\Uber Entertainment\\Planetary Annihilation\\server_mods\\<mod_name>\\ui\\main_game\\live_game\\systems\\`
   - **Linux**: `~/.local/Uber Entertainment/Planetary Annihilation/server_mods/<mod_name>/ui/main_game/live_game/systems/`
   - **Mac**: `~/Library/Application Support/Uber Entertainment/Planetary Annihilation/server_mods/<mod_name>/ui/main_game/live_game/systems/`
4. Launch PA Titans and select your custom systems in the game lobby!

### üîß About

This tool generates balanced star systems for Planetary Annihilation: Titans with:
- Equal starting planets for fair competitive play (identical metal density)
- Stable orbital mechanics (planets positioned 180¬∞ apart)
- Configurable resource planets with controlled variance
- Easy bulk generation and download

**Note**: Create the `server_mods` directory structure if it doesn't exist.
""")

st.sidebar.markdown("---")
st.sidebar.markdown("Made with ‚ù§Ô∏è for PA Titans community")